// JS-Script (UM): matchesonscrollbar.js @ 2022-09-20 09:51:36 +0000
(function(t){if(typeof exports=="object"&&typeof module=="object")t(require("../../lib/codemirror"),require("./searchcursor"),require("../scroll/annotatescrollbar"));else if(typeof define=="function"&&define.amd)define(["../../lib/codemirror","./searchcursor","../scroll/annotatescrollbar"],t);else t(CodeMirror)})(function(c){"use strict";c.defineExtension("showMatchesOnScrollbar",function(t,e,i){if(typeof i=="string")i={className:i};if(!i)i={};return new o(this,t,e,i)});function o(t,e,i,o){this.cm=t;this.options=o;var a={listenForChanges:false};for(var s in o)a[s]=o[s];if(!a.className)a.className="CodeMirror-search-match";this.annotation=t.annotateScrollbar(a);this.query=e;this.caseFold=i;this.gap={from:t.firstLine(),to:t.lastLine()+1};this.matches=[];this.update=null;this.findMatches();this.annotation.update(this.matches);var r=this;t.on("change",this.changeHandler=function(t,e){r.onChange(e)})}var a=1e3;o.prototype.findMatches=function(){if(!this.gap)return;for(var t=0;t<this.matches.length;t++){var e=this.matches[t];if(e.from.line>=this.gap.to)break;if(e.to.line>=this.gap.from)this.matches.splice(t--,1)}var i=this.cm.getSearchCursor(this.query,c.Pos(this.gap.from,0),{caseFold:this.caseFold,multiline:this.options.multiline});var o=this.options&&this.options.maxMatches||a;while(i.findNext()){var e={from:i.from(),to:i.to()};if(e.from.line>=this.gap.to)break;this.matches.splice(t++,0,e);if(this.matches.length>o)break}this.gap=null};function f(t,e,i){if(t<=e)return t;return Math.max(e,t+i)}o.prototype.onChange=function(t){var e=t.from.line;var i=c.changeEnd(t).line;var o=i-t.to.line;if(this.gap){this.gap.from=Math.min(f(this.gap.from,e,o),t.from.line);this.gap.to=Math.max(f(this.gap.to,e,o),t.from.line)}else{this.gap={from:t.from.line,to:i+1}}if(o)for(var a=0;a<this.matches.length;a++){var s=this.matches[a];var r=f(s.from.line,e,o);if(r!=s.from.line)s.from=c.Pos(r,s.from.ch);var n=f(s.to.line,e,o);if(n!=s.to.line)s.to=c.Pos(n,s.to.ch)}clearTimeout(this.update);var h=this;this.update=setTimeout(function(){h.updateAfterChange()},250)};o.prototype.updateAfterChange=function(){this.findMatches();this.annotation.update(this.matches)};o.prototype.clear=function(){this.cm.off("change",this.changeHandler);this.annotation.clear()}});
// #END
