/*
 * Copyright 2012 Nan Deng
 * modified by unixman
 *
 * (c) 2022 unix-world.org
 * r.20230928.2358
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package dhkx

import (
	"errors"
	"io"
	"crypto/rand"
	"math/big"
)

type DHGroup struct {
	p *big.Int
	g *big.Int
}

func (self *DHGroup) P() *big.Int {
	p := new(big.Int)
	p.Set(self.p)
	return p
}

func (self *DHGroup) G() *big.Int {
	g := new(big.Int)
	g.Set(self.g)
	return g
}

func (self *DHGroup) GeneratePrivateKey(randReader io.Reader) (key *DHKey, err error) {
	if randReader == nil {
		randReader = rand.Reader
	}

	// x should be in (0, p).
	// alternative approach:
	// x, err := big.Add(rand.Int(randReader, big.Sub(p, big.NewInt(1))), big.NewInt(1))
	//
	// However, since x is highly unlikely to be zero if p is big enough,
	// we would rather use an iterative approach below,
	// which is more efficient in terms of exptected running time.
	x, err := rand.Int(randReader, self.p)
	if err != nil {
		return
	}

	zero := big.NewInt(0)
	for x.Cmp(zero) == 0 {
		x, err = rand.Int(randReader, self.p)
		if err != nil {
			return
		}
	}
	key = new(DHKey)
	key.x = x

	// y = g ^ x mod p
	key.y = new(big.Int).Exp(self.g, x, self.p)
	key.group = self
	return
}

// This function fetches a DHGroup by its ID as defined in either RFC 2409 or RFC 3526.
// Extra Groups added by unixman: 5, 15, 16, 17, 18 ; 101..107
// If you are unsure what to use use group ID 0 for a sensible default value
func GetGroup(groupID int) (group *DHGroup, err error) {
	if groupID <= 0 {
		groupID = 14
	}
	switch groupID { // {{{SYNC-DHKX-HIGH-PRIMES}}}
		case 1:
			p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A63A3620FFFFFFFFFFFFFFFF", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 2:
			p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 5: // 1536-bit MODP
			p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 14: // 2048-bit MODP (default)
			p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 15: // 3072-bit MODP
			p, _ := new(big.Int).SetString
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 16: // 4096-bit MODP
			p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 17: // 6144-bit MODP
			p, _ := new(big.Int).SetString("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C93402849236C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406AD9E530EE5DB382F413001AEB06A53ED9027D831179727B0865A8918DA3EDBEBCF9B14ED44CE6CBACED4BB1BDB7F1447E6CC254B332051512BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15D1721D03F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97FBEC7E8F323A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AACC8F6D7EBF48E1D814CC5ED20F8037E0A79715EEF29BE32806A1D58BB7C5DA76F550AA3D8A1FBFF0EB19CCB1A313D55CDA56C9EC2EF29632387FE8D76E3C0468043E8F663F4860EE12BF2D5B0B7474D6E694F91E6DCC4024FFFFFFFFFFFFFFFF", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 18: // 8192-bit MODP
			p, _ := new(big.Int).SetString
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		// below are LOW Primes (safe just for internal use)
		case 107:
			p, _ := new(big.Int).SetString("279E569032F0C7256218B58AD6418AA0E9436BE424AB8F1431B1F9E6B5814E0EBDA0FF65EF085D7E73FEE51744DEC07FE08C1A1CC65855630CA983927CA277406AC42094064387D65AEAA849F9BF449E04DF8CB0E99A44B004CE0EFCA3386F1E82C078723CD265288D9A41", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 106:
			p, _ := new(big.Int).SetString("2C6121E6B14ECF756C083544DE0E0933CAC90DBEB6239905BFBEC764527BBB4166FF832A2BCC3B4D6F634EDDD30E40634ADBBB5BFD", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 105:
			p, _ := new(big.Int).SetString("426F09B2B25ABA6BBCBF9CA5EDB660B91D033440916732AF9AE175A84AFB665A25B392361C6952119", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 104:
			p, _ := new(big.Int).SetString("4771CFC3C2B8AD4561CB5437132E35E8398E8F956A2F2C94C51", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 103:
			p, _ := new(big.Int).SetString("F3F2B0EE30050C5F6BFCB9DF1B9454E77BC3503", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 102:
			p, _ := new(big.Int).SetString("6FEBE061005175E46C896E4079", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		case 101:
			p, _ := new(big.Int).SetString("1141317432F7B89", 16)
			group = &DHGroup{
				g: new(big.Int).SetInt64(2),
				p: p,
			}
		default:
			group = nil
			err = errors.New("DH: Unknown group")
	}
	return
}

// This function enables users to create their own custom DHGroup.
// Most users will not however want to use this function, and should prefer
// the use of GetGroup which supplies DHGroups defined in RFCs 2409 and 3526
//
// WARNING! You should only use this if you know what you are doing. The
// behavior of the group returned by this function is not defined if prime is
// not in fact prime.
func CreateGroup(prime, generator *big.Int) (group *DHGroup) {
	group = &DHGroup{
		g: generator,
		p: prime,
	}
	return
}

func (self *DHGroup) ComputeKey(pubkey *DHKey, privkey *DHKey) (key *DHKey, err error) {
	if self.p == nil {
		err = errors.New("DH: invalid group")
		return
	}
	if pubkey.y == nil {
		err = errors.New("DH: invalid public key")
		return
	}
	if pubkey.y.Sign() <= 0 || pubkey.y.Cmp(self.p) >= 0 {
		err = errors.New("DH parameter out of bounds")
		return
	}
	if privkey.x == nil {
		err = errors.New("DH: invalid private key")
		return
	}
	k := new(big.Int).Exp(pubkey.y, privkey.x, self.p)
	key = new(DHKey)
	key.y = k
	key.group = self
	return
}

// #END
